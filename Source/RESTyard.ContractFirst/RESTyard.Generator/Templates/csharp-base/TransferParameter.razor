@inherits RazorTemplateBase

@{
    List<string> interfaces = [];
    var mandatoryArguments = GatherMandatoryParameterArguments(ParametersType, showHidden: true);
    var optionalArguments = GatherOptionalParameterArguments(ParametersType, showHidden: true);
    var mandatoryParentArguments = GatherMandatoryParameterParentArguments(ParametersType, showHidden: true);
    var optionalParentArguments = GatherOptionalParameterParentArguments(ParametersType, showHidden: true);
    var allArguments = mandatoryParentArguments.Concat(mandatoryArguments).Concat(optionalParentArguments).Concat(optionalArguments).ToList();
    var parentArguments = mandatoryParentArguments.Select(TransformMandatoryArgument).Concat(optionalParentArguments.Select(TransformOptionalArgument)).ToList();

    if (ParametersType.usedForQueries)
    {
        interfaces.Add("IHypermediaQuery");
    }
    if (ParametersType.usedForActions)
    {
        interfaces.Add("IHypermediaActionParameter");
    }

    @:public partial record @ParametersType.typeName@("(")@string.Join(", ", allArguments)@(")")
    if (!string.IsNullOrEmpty(ParametersType.parentType))
    {
        <text> : @ParametersType.parentType@("(")@string.Join(", ", parentArguments)@(")")</text>
    }

    if (interfaces.Any())
    {
        var interfaceString = string.Join(", ", interfaces);
        var separator = string.IsNullOrEmpty(ParametersType.parentType) ? ":" : ",";
        <text> @separator @interfaceString</text>
    }
    <text>;@Environment.NewLine</text>
}

@code {
    [Parameter] public ParameterType ParametersType { get; set; } = null!;
}
