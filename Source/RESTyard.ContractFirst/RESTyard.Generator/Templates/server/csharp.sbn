{{-
    include "../_common.sbn"

    func mapNullableType
        if $0
            ret $1 + "?"
        else
            ret $1
        end
    end
-}}
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using RESTyard.AspNetCore.Hypermedia;
using RESTyard.AspNetCore.Hypermedia.Actions;
using RESTyard.AspNetCore.Hypermedia.Attributes;
using RESTyard.AspNetCore.Hypermedia.Extensions;
using RESTyard.AspNetCore.Hypermedia.Links;
using RESTyard.AspNetCore.Query;
using RESTyard.AspNetCore.WebApi.RouteResolver;
{{ IncludeContent }}

{{- if isNotEmpty Namespace }}

namespace {{ Namespace }};
{{- end }}

{{
    contentTypes = [ "application/vnd.siren+json" ]
    for document in Documents
        for link in document.Links
            if isNotEmpty link.contentType
                contentTypes = array.add contentTypes link.contentType
            end
        end
    end
-}}
public static class MimeTypes
{
{{- for contentType in (contentTypes | array.uniq | array.sort) }}
    public const string {{ contentType | string.handleize | string.replace '-' '_' | string.upcase }} = "{{ contentType }}";
{{- end }}
}

{{
    for parametersType in TransferParameters.Parameters
        interfaces = []
        mandatoryArguments = gatherMandatoryParameterArguments parametersType showHidden: true
        optionalArguments = gatherOptionalParameterArguments parametersType showHidden: true
        mandatoryParentArguments = gatherMandatoryParameterParentArguments TransferParameters.Parameters parametersType showHidden: true
        optionalParentArguments = gatherOptionalParameterParentArguments TransferParameters.Parameters parametersType showHidden: true
        allArguments = mandatoryParentArguments | array.concat mandatoryArguments | array.concat optionalParentArguments | array.concat optionalArguments
        parentArguments = array.concat (mandatoryParentArguments | array.each @transformMandatoryArgument) (optionalParentArguments | array.each @transformOptionalArgument)

        if parametersType.usedForQueries
            interfaces = array.add interfaces "IHypermediaQuery"
        end
        if parametersType.usedForActions
            interfaces = array.add interfaces "IHypermediaActionParameter"
        end
~}}
public partial record {{ parametersType.typeName }}(
    {{- for arg in allArguments }}
        {{- arg }}
        {{- if !for.last }}, {{ end }}
    {{- end }})
    {{- if isNotEmpty parametersType.parentType }} : {{parametersType.parentType}}(
        {{- for arg in parentArguments }}
            {{- arg }}
            {{- if !for.last }}, {{ end }}
        {{- end -}}
    ){{ end }}
    {{- for interface in interfaces }}
        {{- if for.first }}
            {{- if isNotEmpty parametersType.parentType }}, {{ else }} : {{ end }}
        {{- end }}
        {{- interface }}
        {{- if !for.last }}, {{ end }}
    {{- end }};
{{ end }}
{{-
    for document in Documents
}}

{{- typeName = document.name + "Hto" }}
[HypermediaObject(Title = "{{ document.title }}", Classes = new string[]{ {{ for class in document.Classifications }}"{{ class.class }}"{{ if !for.last }}, {{ end }}{{ end }} })]
public partial class {{ typeName }} : {{
    if string.empty document.parentDocument
        iff document.isQueryResult "HypermediaQueryResult" "HypermediaObject"
    else
        document.parentDocument + "Hto"
    end
}}
{
{{- keyProperty = null
    checkProperties typeName document.Properties
    for property in document.Properties }}
{{ if property.isKey
    keyProperty = property ~}}
    [Key("{{ property.name | uncapitalize }}")]
{{ end ~}}
{{ if property.hidden ~}}
    [FormatterIgnoreHypermediaProperty]
{{ end ~}}
    public {{ mapNullableType (!property.mandatory) property.type }} {{ property.name }} { get; set; }
{{ end }}
{{- for operation in document.Operations }}
    [HypermediaAction(Name = "{{ operation.name }}", Title = "{{operation.title}}")]
    public {{ operation.name }}Op {{ operation.name }} { get; init; }
{{ end }}
{{-
    arguments = gatherArguments document
    parentArguments = gatherParentArguments Documents document
    allArguments = array.concat parentArguments arguments
}}
    public {{ typeName }}(
{{- for argument in allArguments }}
        {{ argument }}{{ if !for.last }},{{ end }}
{{- end }}
    ) : base(
        {{- for argument in parentArguments }}
            {{ argument | string.split ' ' | array.last }}
            {{- if !for.last }},{{ end }}
        {{- end }}
        {{- if (array.size parentArguments) == 0 }}
            {{- if document.isQueryResult -}}
                query
            {{- else if isEmpty document.parentDocument -}}
                hasSelfLink: {{ document.hasSelfLink }}
            {{- end -}}
        {{- end -}}
        )
    {
{{- for property in document.Properties }}
        this.{{ property.name }} = {{ property.name | uncapitalize }};
{{- end }}
{{- for operation in document.Operations }}
        this.{{ operation.name }} = {{ operation.name | uncapitalize }};
{{- end }}
{{-
    for entity in document.Entities
}}
        Entities.AddRange("{{ entity.collectionName }}", {{ entity.collectionName | uncapitalize }});
{{-
    end
}}
{{-
    for link in document.Links
        linkGuard = "has" + link.rel
        linkValue = "new HypermediaObject" + (iff (isNotEmpty link.query) "Query" "Key") + "Reference(typeof(" + link.document + "Hto), " + (iff (isNotEmpty link.query) ((link.rel | uncapitalize) + "Query, ") "") + (link.rel | uncapitalize) + "Key)"
        if isEmpty link.document
            linkGuard = (link.rel | uncapitalize) + " is not null"
            linkValue = link.rel | uncapitalize
        end
        if link.mandatory
}}
        Links.Add("{{ link.rel }}", {{ linkValue }});
{{-
        else
}}
        if ({{ linkGuard }})
        {
            Links.Add("{{ link.rel }}", {{ linkValue }});
        }
{{-
        end
    end
}}
    }
{{-
    func isKeyProperty
        ret $0.isKey
    end
    keyProperties = array.filter document.Properties @isKeyProperty
    if (array.size keyProperties) != 0
}}
    public static object CreateKeyObject(
    {{-
        for property in keyProperties
    -}}
    {{ mapNullableType (!property.mandatory) property.type }} {{ property.name | uncapitalize }}{{ if !for.last }}, {{ end }}
    {{-
        end
    }}) => new { {{
        for property in keyProperties
    -}}
    {{ property.name | uncapitalize }} = {{ property.name | uncapitalize }}{{ if !for.last }}, {{ end }}
    {{-
        end
    }} };
{{-
    end
}}
{{
        for operation in document.Operations
            typeParameters = []
            actionType = "HypermediaAction"
            if isNotEmpty operation.parameterTypeName
                typeParameters = array.add typeParameters operation.parameterTypeName
            end
           
            for type in typeParameters
                if for.first
                    actionType += "<"
                end
                actionType += type
                if for.last
                    actionType += ">"
                else
                    actionType += ", "
                end
            end
}}
    public partial class {{ operation.name }}Op : {{ actionType }}
    {
{{-
            canExecuteArg = "Func<bool> canExecute" + operation.name

            parameterArg = ""
            parameterValue = ""
            if isNotEmpty operation.parameterTypeName
                parameterArg += ", " + operation.parameterTypeName + "? prefilledValues = default"
                parameterValue += ", prefilledValues";
            end
}}
        public {{ operation.name }}Op({{ canExecuteArg }}{{ parameterArg }})
            : base(canExecute{{ operation.name }}{{ parameterValue }}) { }
    }
{{
        end
-}}
}
{{
    end
-}}
