{{-
    include "../../_common.sbn"

    func mapType
        if $0 == 'bool'
            ret 'boolean'
        end
        ret $0
    end

    func mapNullableType
        if $0
            ret "Nullable<" + (mapType $1) + ">"
        else
            ret mapType $1
        end
    end
-}}
{{ IncludeContent }}

export type Nullable<T> = T | undefined | null;

export function match<TIn, TOut>(nullable: Nullable<TIn>, onValue: (v: TIn) => TOut, onNothing: () => TOut): TOut {
    if (nullable === undefined || nullable === null) {
        return onValue(nullable as TIn);
    } else {
        return onNothing();
    }
}
{{
    func gatherParameterArguments
        parametersRetVal = []
        checkProperties $0.typeName $0.Property
        for property in $0.Property | array.filter @isVisibleProperty
            param = property.name + ": " + (mapNullableType (!property.mandatory) property.type)
            parametersRetVal = array.add parametersRetVal param
        end
        ret parametersRetVal
    end
~}}
{{
    for parametersType in TransferParameters.Parameters
        parameters = gatherParameterArguments parametersType
        parentParameters = []
        currentType = parametersType
        while isNotEmpty currentType.parentType
            currentType = findParentParameters TransferParameters.Parameters currentType.parentType
            parentParameters = array.concat (gatherParameterArguments currentType) parentParameters
        end
}}
export class {{ parametersType.typeName }}
    {{- if isNotEmpty parametersType.parentType }} extends {{ parametersType.parentType }}
    {{- end }} {
    constructor(
{{- for param in parentParameters }}
        {{ param }}{{ if !for.last }},{{ end }}
{{- end }}
{{- if (array.size parentParameters) > 0 && (array.size parameters) > 0 }},{{ end -}}
{{- for param in parameters }}
        public readonly {{ param }}{{ if !for.last }},{{ end }}
{{- end }}
    ) { {{ if isNotEmpty parametersType.parentType -}}
        super(
            {{- for param in parentParameters}}
                {{- param | string.split ':' | array.first }}
                {{- if !for.last }}, {{ end }}
            {{- end -}}
        );
    {{- end }} }
}
{{
    func gatherArguments
        argumentsRetVal = []
        checkProperties $0.name $0.Properties
        for property in $0.Properties | array.filter @isVisibleProperty
            arg = property.name + ": " + (mapNullableType (!property.mandatory) property.type)
            argumentsRetVal = array.add argumentsRetVal arg
        end
        for entity in $0.Entities
            arg = entity.collectionName + ": " + entity.document + "Hco[]"
            argumentsRetVal = array.add argumentsRetVal arg
        end
        if $0.hasSelfLink && $.includeSelfLink
            arg = "self: HypermediaLink<" + $0.name + "Hco>"
            argumentsRetVal = array.add argumentsRetVal arg
        end
        for link in $0.Links
            linkType = iff (isNotEmpty link.document) (link.document + "Hco") ("HypermediaObject")
            if (link.ResultDocuments | array.size) > 0
                linkType = ""
                for document in link.ResultDocuments
                    linkType += document.document + "Hco"
                    if !for.last
                        linkType += " | "
                    end
                end
            end
            type = "HypermediaLink<" + linkType + ">"
            arg = link.rel + ": " + (mapNullableType (!link.mandatory) type)
            argumentsRetVal = array.add argumentsRetVal arg
        end
        for operation in $0.Operations
            actionType = ""
            typeArgs = []
            if isEmpty operation.resultDocument
                actionType += "HypermediaAction"
            else
                actionType += "HypermediaFunction"
                typeArgs = [ (operation.resultDocument + "Hco") ]
            end
            if isNotEmpty operation.parameterTypeName
                typeArgs = array.add typeArgs operation.parameterTypeName
            end
            if typeArgs.size > 0
                actionType += "<"
                for typeArg in typeArgs
                    actionType += typeArg
                    if !for.last
                        actionType += ", "
                    end
                end
                actionType += ">"
            end
            arg = operation.name + ": " + (mapNullableType true actionType)
            argumentsRetVal = array.add argumentsRetVal arg
        end
        ret argumentsRetVal
    end
~}}
{{
    end

    for document in Documents
        arguments = gatherArguments document includeSelfLink: true
        parentArguments = []
        currentDocument = document
        while isNotEmpty currentDocument.parentDocument
            currentDocument = findParent Documents currentDocument.parentDocument
            parentArguments = array.concat (gatherArguments currentDocument includeSelfLink: false) parentArguments
        end
        parentArgumentsForCall = []
        currentDocument = document
        if isNotEmpty currentDocument.parentDocument
            currentDocument = findParent Documents currentDocument.parentDocument
            parentArgumentsForCall = gatherArguments currentDocument includeSelfLink: true
            while isNotEmpty currentDocument.parentDocument
                currentDocument = findParent Documents currentDocument.parentDocument
                parentArgumentsForCall = array.concat (gatherArguments currentDocument includeSelfLink: false) parentArgumentsForCall
            end
        end
        allArguments = array.concat parentArguments arguments
        
}}
export class {{ document.name }}Hco extends {{ if isNotEmpty document.parentDocument }}
        {{- document.parentDocument }}Hco
    {{- else -}}
        HypermediaObject
    {{- end }} {
    constructor(
{{- for param in parentArguments }}
        {{ param }}{{ if !for.last }},{{ end }}
{{- end }}
{{- if (array.size parentArguments) > 0 && (array.size arguments) > 0 }},{{ end -}}
{{- for param in arguments }}
        public{{ if (array.size parentArguments) > 0 && string.contains param "self:" }} override{{ end }} readonly {{ param }}{{ if !for.last }},{{ end }}
{{- end }}
    ) {
        super({{- for arg in parentArgumentsForCall }}{{ arg | string.split ':' | array.first }}{{ if !for.last }}, {{ end }}{{- end }});
    }
}
{{ end }}
