
{{-
    include "../_common.sbn"

    func mapNullableType
        if $0
            ret $1 + "?"
        else
            ret $1
        end
    end
-}}
#nullable enable
using RESTyard.Client;
using RESTyard.Client.Builder;
using RESTyard.Client.Hypermedia;
using RESTyard.Client.Hypermedia.Attributes;
using RESTyard.Client.Hypermedia.Commands;
{{ IncludeContent }}

{{- if isNotEmpty Namespace }}

namespace {{ Namespace }};
{{- end }}

public class DefaultHypermediaClientBuilder
{
    public static IHypermediaResolverBuilder CreateBuilder()
        => HypermediaResolverBuilder.CreateBuilder()
            .ConfigureObjectRegister(register =>
            {
{{- for document in Documents }}
                register.Register<{{ document.name }}Hco>();
{{- end }}
            });
}

{{ for parametersType in TransferParameters ~}}
public partial record {{ parametersType.typeName }}(
    {{- checkProperties parametersType.typeName parametersType.Property }}
    {{- for property in parametersType.Property | array.filter @isVisibleProperty }}
        {{- mapNullableType (!property.mandatory) property.type }} {{ property.name }}        
        {{- if !for.last }}, {{ end }}
    {{- end }});
{{ end }}
{{- for document in Documents }}
{{- typeName = document.name + "Hco" }}
[HypermediaClientObject({{ for class in document.Classifications }}"{{ class.class }}"{{ if !for.last }}, {{ end }}{{ end }})]
public partial class {{ typeName }} : HypermediaClientObject
{
{{- checkProperties typeName document.Properties }}
{{- for property in document.Properties | array.filter @isVisibleProperty }}
{{-     if property.mandatory }}
    [Mandatory]
{{-     end }}
    public {{ mapNullableType (!property.mandatory) property.type }} {{ property.name }} { get; set; }
{{ end }}
{{- if document.hasSelfLink }}
    [Mandatory]
    [HypermediaRelations(new[]{ "self" })]
    public MandatoryHypermediaLink<{{ typeName }}> Self { get; set; }
{{- end }}
{{ for link in document.Links }}
{{- if link.mandatory }}
    [Mandatory]
{{- end }}
    [HypermediaRelations(new[]{ "{{ link.rel }}" })]
    public {{ mapNullableType (!link.mandatory) ("MandatoryHypermediaLink<" + link.document + "Hco>") }} {{ link.rel | string.capitalize }} { get; set; }
{{ end }}
{{- for operation in document.Operations }}
    [HypermediaCommand("{{ operation.name }}")]
{{-
typeParameters = []
actionType = ""
if isEmpty operation.resultDocument
    actionType = "IHypermediaClientAction"
else
    actionType = "IHypermediaClientFunction"
    typeParameters = array.add typeParameters (operation.resultDocument + "Hco")
end
if isNotEmpty operation.parameterTypeName
    typeParameters = array.add typeParameters operation.parameterTypeName
end
for type in typeParameters
    if for.first
        actionType += "<"
    end
    actionType += type
    if for.last
        actionType += ">"
    else
        actionType += ", "
    end
end
}}
    public {{ actionType }}? {{ operation.name }} { get; set; }
{{ end -}}
}
{{ end -}}
