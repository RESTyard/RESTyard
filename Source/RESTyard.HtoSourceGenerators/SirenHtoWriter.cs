using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace RESTyard.HtoSourceGenerators
{
    public static class SirenHtoWriter
    {
        public static void AddSirenHtoSource(SourceProductionContext sourceProductionContext, HtoInfo htoInfo)
        {
            sourceProductionContext.AddSource(htoInfo.OriginalClassName + "Siren.g.cs", SourceText.From(GenerateClassString(htoInfo), Encoding.UTF8));
        }

        private static string GenerateClassString(HtoInfo htoInfo)
        {
            var propertyClassName = htoInfo.OriginalClassName + "Properties";
            var className = htoInfo.OriginalClassName + "Siren";
            var htoUsings = string.Join("\n", htoInfo.UsingsOfHto.Select(u => "using " + u.Name + ";"));
            var commentedDocumentationString = FormatDocumentation(htoInfo.ClassDocumentation);
            var properties = GeneratePropertyStrings(htoInfo.PropertiesToMap, 4);
            var propertyAssignments = GeneratePropertyAssignment(htoInfo.PropertiesToMap, "result", 8);
            var classAttributesString = string.Join("\n", htoInfo.ClassAttributes
                .RemoveHypermediaAttributes()
                .Select(a => $"{a.GetOriginalAttributeCodeString()}"));

            return $$"""
                     using System.Collections.Generic;
                     using System.ComponentModel.DataAnnotations;
                     using RESTyard.HtoSourceGenerators.Siren;
                      
                     {{htoUsings}}
                     
                     namespace {{htoInfo.NamespaceOfHto}};
                     // GENERATED by RESTyard, do not modify
                     {{commentedDocumentationString}}
                     [GeneratedFromClass(typeof({{htoInfo.OriginalClassName}}))]
                     {{classAttributesString}}
                     public class {{className}} : Entity<{{propertyClassName}}>, ISirenHto
                     {
                        public {{className}}() : base() {
                            {{ (properties.Any() ? $"this.properties = new {propertyClassName}();" : string.Empty)}}
                        }
                     
                        public static {{className}} FromHto({{htoInfo.OriginalClassName}} hto) {
                             var result = new {{className}}();
                            
                             // assign propertys from hto
                     {{propertyAssignments}}

                             // add actions
                             // add embedded entities
                             // add linked entieties
                             // add links

                            return result;
                        }
                     
                     }
                     
                     public class {{propertyClassName}}
                     {
                         // must be enabled manually for generated code
                         #nullable enable
                         #pragma warning disable CS8618
                     {{properties}}
                         #nullable disable
                         #pragma warning restore  CS8618
                     }
                     """;
        }

        private static string GeneratePropertyStrings(List<HtoPropertyInfo> propertiesToMap, int indentDepth)
        {
            var stringBuilder = new StringBuilder();
            var indentStrings = string.Empty.PadRight(indentDepth);

            foreach (var htoPropertyInfo in propertiesToMap)
            {
                stringBuilder.Append("\n");
                if (!string.IsNullOrWhiteSpace(htoPropertyInfo.PropertyDocumentation))
                {
                    stringBuilder.Append(FormatDocumentation(htoPropertyInfo.PropertyDocumentation, indentDepth));
                    stringBuilder.Append("\n");
                }

                foreach (var attribute in htoPropertyInfo.Attributes.RemoveHypermediaAttributes())
                {
                    var originalAttributeCode = attribute.GetOriginalAttributeCodeString();
                    stringBuilder.Append($"{indentStrings}{originalAttributeCode}\n");
                }

                stringBuilder.Append(indentStrings);
                stringBuilder.Append("public ");
                stringBuilder.Append(htoPropertyInfo.Type);
                stringBuilder.Append(" ");
                stringBuilder.Append(htoPropertyInfo.MappedName);
                stringBuilder.Append(" {get; set;}\n");
            }

            return stringBuilder.ToString();
        }      
        
        private static string GeneratePropertyAssignment(List<HtoPropertyInfo> propertiesToMap, string assignmentTarget, int indentDepth)
        {
            var stringBuilder = new StringBuilder();
            var indentStrings = string.Empty.PadRight(indentDepth);

            foreach (var htoPropertyInfo in propertiesToMap)
            {
                stringBuilder.Append(indentStrings);
                stringBuilder.Append($"{assignmentTarget}.properties.{htoPropertyInfo.MappedName} =  hto.{htoPropertyInfo.OriginalName};\n");
            }

            return stringBuilder.ToString();
        }

        

        private static object FormatDocumentation(string? rawDocumentation, int indentDepth = 0)
        {
            if (string.IsNullOrWhiteSpace(rawDocumentation))
            {
                return string.Empty;
            }

            var indentStrings = string.Empty.PadRight(indentDepth);
            var segments = rawDocumentation!.Trim().Split('\n');
            var segmentCount = segments.Length;
            var removedWrapperTag = segments.Skip(1).Take(segmentCount - 2);
            return string.Join("\n", removedWrapperTag.Select(seg => indentStrings + "/// " + seg.Trim()));
        }

        public static void WriteAttributes(SourceProductionContext sourceProductionContext)
        {
            sourceProductionContext.AddSource("GeneratedFromClassAttribute.g.cs", SourceText.From(GenerateGeneratedFromClassAttributeString(), Encoding.UTF8));
        }

        private static string GenerateGeneratedFromClassAttributeString()
        { // todo add namespace
            return """
                   using System;

                   [AttributeUsage(AttributeTargets.Class)]
                   public sealed class GeneratedFromClassAttribute : Attribute
                   {
                       public GeneratedFromClassAttribute(Type sourceType)
                       {
                           SourceType = sourceType;
                       }
                       public Type SourceType { get; set; }
                   }
                   """;
        }
    }
}