{{-
    include "../_common.sbn"

    func mapNullableType
        if $0
            ret $1 + "?"
        else
            ret $1
        end
    end
-}}
#nullable enable
using Bluehands.Hypermedia.Relations;
using WebApi.HypermediaExtensions.Hypermedia;
using WebApi.HypermediaExtensions.Hypermedia.Attributes;
using WebApi.HypermediaExtensions.Hypermedia.Links;
using WebApi.HypermediaExtensions.Hypermedia.Actions;
using WebApi.HypermediaExtensions.WebApi.RouteResolver;

{{- if isNotEmpty Namespace }}

namespace {{ Namespace }};
{{- end }}

{{
    contentTypes = []
    for document in Documents
        for link in document.Links
            if isNotEmpty link.contentType
                contentTypes = array.add contentTypes link.contentType
            end
        end
    end
-}}
public static class MimeTypes
{
{{- for contentType in (contentTypes | array.uniq | array.sort) }}
    public const string {{ contentType | string.handleize | string.replace '-' '_' | string.upcase }} = "{{ contentType }}";
{{- end }}
}

{{ for parametersType in TransferParameters ~}}
public partial record {{ parametersType.typeName }}(
    {{- for property in parametersType.Property }}
        {{- mapNullableType (!property.mandatory) property.type }} {{ property.name }}
        {{- if !property.mandatory }} = default{{ end }}
        {{- if !for.last }}, {{ end }}
    {{- end }}) : IHypermediaActionParameter;
{{ end }}
{{-
    for document in Documents
        for operation in document.Operations
            typeParameters = []
            actionType = ""
            if isNotEmpty operation.parameterTypeName
                typeParameters = array.add typeParameters operation.parameterTypeName
            end
            if isEmpty operation.resultDocument
                actionType = "HypermediaAction"
            else
                actionType = "HypermediaFunction"
                typeParameters = array.add typeParameters (operation.resultDocument + "Hto")
            end
            for type in typeParameters
                if for.first
                    actionType += "<"
                end
                actionType += type
                if for.last
                    actionType += ">"
                else
                    actionType += ", "
                end
            end
}}
public class {{ operation.name }} : {{ actionType }}
{
{{-
            canExecuteArg = "Func<bool> canExecute" + operation.name

            executeArg = ""
            if isEmpty operation.resultDocument
                executeArg = "Action" + (mapString operation.parameterTypeName "<%s>")
            else
                executeArg = "Func<" + (mapString operation.parameterTypeName "%s, ") + operation.resultDocument + "Hto>"
            end
            executeArg += " execute" + operation.name
}}
    public {{ operation.name }}({{ canExecuteArg }}, {{ executeArg }}) : base(canExecute{{ operation.name }}, execute{{ operation.name }}) { }
}
{{      end }}

{{- typeName = document.name + "Hto" }}
[HypermediaObject(Title = "{{ document.title }}", Classes = new[]{ {{ for class in document.Classifications }}"{{ class.class }}"{{ if !for.last }}, {{ end }}{{ end }} })]
public partial class {{ typeName }} : HypermediaObject
{
{{- keyProperty = null
    for property in document.Properties }}
{{ if property.isKey
    keyProperty = property ~}}
    [Key("{{ property.name | uncapitalize }}")]
{{ end ~}}
{{ if property.hidden ~}}
    [FormatterIgnoreHypermediaProperty]
{{ end ~}}
    public {{ mapNullableType (!property.mandatory) property.type }} {{ property.name }} { get; init; }
{{ end }}
{{- for operation in document.Operations }}
    [HypermediaAction(Name = "{{ operation.name }}", Title = "{{operation.title}}")]
    public {{ operation.name }} {{ operation.name }} { get; init; }
{{ end }}
{{-
    arguments = []
    for property in document.Properties
        arg = (mapNullableType (!property.mandatory) property.type) + " " + (property.name | uncapitalize)
        arguments = array.add arguments arg
    end
    for operation in document.Operations
        arg = operation.name + " " + (operation.name | uncapitalize)
        arguments = array.add arguments arg
    end
    for entity in document.Entities
        arg = "IEnumerable<" + entity.document + "Hto> " + (entity.collectionName | uncapitalize)
        arguments = array.add arguments arg
    end
    for link in document.Links
        if !link.mandatory
            arg = "Func<bool> has" + link.rel
            arguments = array.add arguments arg
        end
    end
}}
    public {{ typeName }}(
{{- for argument in arguments }}
        {{ argument }}{{ if !for.last }},{{ end }}
{{- end }}
    ) : base(hasSelfLink: {{ document.hasSelfLink }})
    {
{{- for property in document.Properties }}
        this.{{ property.name }} = {{ property.name | uncapitalize }};
{{- end }}
{{- for operation in document.Operations }}
        this.{{ operation.name }} = {{ operation.name | uncapitalize }};
{{- end }}
{{- for entity in document.Entities }}
        Entities.AddRange({{ entity.collectionName | uncapitalize }}.Select(e => new RelatedEntity(DefaultHypermediaRelations.EmbeddedEntities.Item, new HypermediaObjectReference(e))));
{{- end }}
{{- for link in document.Links }}
{{- if link.mandatory }}
        Links.Add("{{ link.rel }}", new HypermediaObjectKeyReference(typeof({{ link.document }}Hto){{ if keyProperty }}, {{ keyProperty.name | uncapitalize }}{{ end }}));
{{- else }}
        if (has{{ link.rel }}())
        {
            Links.Add("{{ link.rel }}", new HypermediaObjectKeyReference(typeof({{ link.document }}Hto){{ if keyProperty }}, {{ keyProperty.name | uncapitalize }}{{ end }}));
        }
{{- end }}
{{- end }}
    }
}
{{ end -}}
